<configs>
    <!-- Sewing up lacerations is painful -->
    <append xpath="/items/item[@name='resourceSewingKit']/effect_group">
        <triggered_effect trigger="onSelfPrimaryActionEnd" action="PlaySound" sound="player#painlg" play_in_head="false">
            <requirement name="NotHasBuff" buff="buffBeer" />
        </triggered_effect>
    </append>

    <!-- 
        Dirty bandages
    -->
    <insertBefore xpath="/items/item[@name='medicalBandage']">
        <item name="medicalBandageDirty">
            <property name="Tags" value="medical" />
            <property name="DisplayType" value="medical" />
            <property name="HoldType" value="64" />
            <property name="Meshfile" value="#Other/Items?Health/bandage.fbx" />
            <property name="DropMeshfile" value="#Other/Items?Misc/sack_droppedPrefab.prefab" />
            <property name="Material" value="Mcloth" />
            <property name="Stacknumber" value="10" />
            <property name="FuelValue" value="1" />
            <property name="Weight" value="5" />
            <property name="EconomicValue" value="5" />
            <property name="Group" value="Science,Medical,Basics" />
            <property class="Action0">
                <property name="Class" value="Eat" />
                <property name="Delay" value="1.0" />
                <property name="Use_time" value="..." />
                <property name="Sound_start" value="player_bandage" />
                <requirement name="CVarCompare" cvar="lacerationBleedingStatus" operation="GTE" value="2" />
            </property>
            <property class="Action1">
                <property name="Class" value="UseOther" />
                <property name="Delay" value="1.0" />
                <property name="Use_time" value="..." />
                <property name="Sound_start" value="player_bandage" />
                <property name="Buff" value="buffInfectionCatch" />
            </property>
            <effect_group tiered="false">
                <!-- Self -->
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="RemoveBuff" buff="buffInjuryBleeding" />
                <display_value name="dStopsBleeding" value="1" />
                <!-- 100% chance to trigger infection when suffering a laceration -->
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="triggerInfectionDirtyBandage">
                    <requirement name="HasBuff" buff="buffLaceration" />
                </triggered_effect>
                <!-- 33% chance to trigger infection otherwise -->
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="triggerInfectionDirtyBandage">
                    <requirement name="NotHasBuff" buff="buffLaceration" />
                    <requirement name="RandomRoll" seed_type="Random" min_max="0,100" operation="LTE" value="33" />
                </triggered_effect>

                <!-- Other -->
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="RemoveBuff" target="other" buff="buffInjuryBleeding" />
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="10" />
                <!-- 100% chance to catch infection when suffering a laceration -->
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="AddBuff" target="other" buff="triggerInfectionDirtyBandage">
                    <requirement name="HasBuff" buff="buffLaceration" />
                </triggered_effect>
                <!-- 33% chance to catch infection otherwise -->
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="AddBuff" target="other" buff="triggerInfectionDirtyBandage">
                    <requirement name="NotHasBuff" buff="buffLaceration" />
                    <requirement name="RandomRoll" seed_type="Random" min_max="0,100" operation="LTE" value="33" />
                </triggered_effect>
            </effect_group>

            <effect_group tiered="false">
                <!-- medical XP gains -->
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="GiveExp" exp="10" />
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="GiveExp" exp="4">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="1" />
                </triggered_effect>
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="GiveExp" exp="6">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="2" />
                </triggered_effect>
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="GiveExp" exp="8">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="3" />
                </triggered_effect>
                <triggered_effect trigger="onSelfPrimaryActionEnd" action="GiveExp" exp="10">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="4" />
                </triggered_effect>
            </effect_group>

            <effect_group tiered="false">
                <!-- medical XP secondary action gains -->
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="10" />
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="4">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="1" />
                </triggered_effect>
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="6">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="2" />
                </triggered_effect>
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="8">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="3" />
                </triggered_effect>
                <triggered_effect trigger="onSelfSecondaryActionEnd" action="GiveExp" exp="10">
                    <requirement name="ProgressionLevel" progression_name="perkPhysician" operation="Equals" value="4" />
                </triggered_effect>
            </effect_group>
        </item>
    </insertBefore>
    <!-- Since clean bandages now have campfire recipes, add CFChemicals to its Group property -->
    <append xpath="/items/item[@name='medicalBandage']/property[@name='Group']/@value">,CFChemicals</append>
    <!-- To make up for the increase in infection chances, provide minor antibiotic effects to first aid items -->
    <insertAfter xpath="/items/item[@name='medicalFirstAidBandage']/property[last()]">
        <property name="DisplayType" value="medicalFirstAidBandage" />
    </insertAfter>
    <insertAfter xpath="/items/item[@name='medicalFirstAidBandage']/effect_group[last()]">
        <effect_group tiered="false">
            <display_value name="dCureInfection" value=".01" />
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="ModifyCVar" cvar="$buffInfectionAddCurePerc" operation="add" value="1" />
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="buffInfectionAddCure" />
        </effect_group>
    </insertAfter>
    <insertAfter xpath="/items/item[@name='medicalFirstAidKit']/effect_group[last()]">
        <effect_group tiered="false">
            <display_value name="dCureInfection" value=".03" />
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="ModifyCVar" cvar="$buffInfectionAddCurePerc" operation="add" value="3" />
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="buffInfectionAddCure" />
        </effect_group>
    </insertAfter>

    <!--
        Fire Bad
    -->
    <!-- Grandpa's Moonshine: already has buff to extingush fire; swap it out -->
    <set xpath="/items/item[@name='drinkJarGrandpasMoonshine']/effect_group/triggered_effect[@buff='buffExtinguishFire']/@buff">buffFireBad</set>
    <!-- Grandpa's Awesome Sauce: already has buff to extingush fire; swap it out -->
    <set xpath="/items/item[@name='drinkJarGrandpasAwesomeSauce']/effect_group/triggered_effect[@buff='buffExtinguishFire']/@buff">buffFireBad</set>
    <!-- Recog: add effect group -->
    <append xpath="/items/item[@name='drugRecog']">
        <effect_group tiered="false" name="Fire Bad!">
            <requirement name="HasBuff" buff="buffIsOnFire" />
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="buffFireBad" />
        </effect_group>
    </append>

    <!-- Gasoline: no primary action - if not on fire, get buffDrunkGasoline (new buff, dysentery + effects) -->
    <append xpath="/items/item[@name='ammoGasCan']">
        <property class="Action0">
            <property name="Class" value="Eat" />
            <property name="Delay" value="1" />
            <property name="Use_time" value="..." />
            <property name="Sound_start" value="player_drinking" />
        </property>
        <effect_group tiered="false" name="Drink Tier 0">
            <requirement name="NotHasBuff" buff="buffIsOnFire" />
            <!--
                If you use a gasoline-powered tool (like an augur), that counts as "using" the
                gasoline too. This requirement prevents getting the buff in those cases.
            -->
            <requirement name="HoldingItemHasTags" tags="gasoline"/>
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="buffDrunkGasoline" />
        </effect_group>
        <effect_group tiered="false" name="Fire Bad!">
            <requirement name="HasBuff" buff="buffIsOnFire" />
            <requirement name="HoldingItemHasTags" tags="gasoline"/>
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="AddBuff" buff="buffFireBad" />
        </effect_group>
    </append>
</configs>